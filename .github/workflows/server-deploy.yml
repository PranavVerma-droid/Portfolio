name: Deploy to Production Server

on:
  push:
    branches: [ "master" ]

jobs:
  wait-for-builds:
    runs-on: ubuntu-selfhosted
    steps:
      - name: Wait for Docker Builds
        uses: actions/github-script@v7
        with:
          script: |
            const workflows = ['docker-build.yml', 'docker-build-2.yml'];
            const maxWaitTime = 600000; // 10 mins
            const startTime = Date.now();
            
            while (Date.now() - startTime < maxWaitTime) {
              const runs = await Promise.all(
                workflows.map(workflow => 
                  github.rest.actions.listWorkflowRuns({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: workflow,
                    head_sha: context.sha,
                    per_page: 1
                  })
                )
              );
              
              const allComplete = runs.every(run => 
                run.data.workflow_runs.length > 0 && 
                ['success', 'failure', 'cancelled'].includes(run.data.workflow_runs[0].conclusion)
              );
              
              const allSuccessful = runs.every(run => 
                run.data.workflow_runs.length > 0 && 
                run.data.workflow_runs[0].conclusion === 'success'
              );
              
              if (allComplete) {
                if (allSuccessful) {
                  console.log('Both Docker builds completed successfully');
                  return;
                } else {
                  throw new Error('One or more Docker builds failed');
                }
              }
              
              console.log('Waiting for Docker builds to complete...');
              await new Promise(resolve => setTimeout(resolve, 10000));
            }
            
            throw new Error('Timeout waiting for Docker builds to complete');

  deploy:
    runs-on: ubuntu-selfhosted
    needs: wait-for-builds
    steps:
      - name: Deploy to server
        run: |
          echo "Starting deployment..."

          git config --global --add safe.directory /var/www/db1/portfolio/portfolio
          cd /var/www/db1/portfolio/portfolio || exit 1

          echo "Resetting local changes..."
          git reset --hard HEAD
          git clean -fd

          echo "Pulling latest changes..."
          git fetch origin
          git reset --hard origin/master

          echo "Pulling latest Docker images..."
          cd /var/www/db1/portfolio || exit 1
          docker compose pull || exit 1

          echo "Starting containers..."
          docker compose up -d || exit 1

          echo "Deployment completed successfully"
        shell: bash